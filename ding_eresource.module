<?php
/**
 * @file
 * E-resource content type and Views for Ding!
 */

/**
 * Implements hook_menu().
 */
function ding_eresource_menu() {
  return array(
    'admin/settings/ding/eresource/header' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ding_eresource_header_text_edit_form'),
      'access arguments' => array('edit e-resource header texts'),
      'file' => 'ding_eresource.pages.inc',
    ),
  );
}

/**
 * Implements hook_init().
 */
function ding_eresource_init() {
  // Add our own stylesheet.
  drupal_add_css(drupal_get_path('module', 'ding_eresource') . '/css/ding_eresource.css');
}

/**
 * Implements hook_perm().
 */
function ding_eresource_perm() {
  return array('edit e-resource header texts');
}

/**
 * Implements hook_theme_registry_alter().
 */
function ding_eresource_theme_registry_alter(&$theme_registry) {
  // We provide our own node templates, so look here as well.
  $theme_path = drupal_get_path('module', 'ding_eresource') . '/templates';
  $theme_hooks = array('node');
  foreach ($theme_hooks as $hook) {
    $theme_registry[$hook]['theme paths'][] = $theme_path;
  }
}

/**
 * Implements hook_nodeapi().
 */
function ding_eresource_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // Set default breadcrumb if:
  // - viewing a e-resource node.
  // - on a page by itself.
  if (($node->type == 'eresource') &&
      ($op == 'view') && !$a3 && $a4) {
    $trail = array(
      l(t('Home'), '<front>'),
    );

    $trail[] = l(t('E-resurser'), 'e-resurser');

    drupal_set_breadcrumb($trail);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ding_eresource_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ding_eresource_views_pre_render(&$view) {
  if ($view->name == 'eresource_list' && $view->current_display == 'panel_pane_1') {
    $view->attachment_before = ding_eresource_header_text($view->args) . $view->attachment_before;
  }
}

/**
 * Preprocess variables for the node template.
 */
function ding_eresource_preprocess_node(&$vars) {
  // Link from the logo image to the resource.
  if (isset($vars['field_list_image'][0]) && isset($vars['field_link'][0]['url'])) {
    $vars['field_list_image'][0]['view'] = l(
      theme('imagecache', '120_120', $vars['field_list_image'][0]['filepath']),
      $vars['field_link'][0]['url'], array(
        'html' => TRUE,
        'attributes' => array(
          'title' => t('Go to !eresource_name', array('!eresource_name' => ($vars['field_link'][0]['title']) ? $vars['field_link'][0]['title'] : $vars['node']->title)),
        ),
      )
    );
  }
}

/**
 * Get context-sensitive header text for the e-resource view.
 *
 * @param array $args
 *   The arguments presented to the View instance.
 *
 * @return string
 *   The header text, rendered as HTML.
 */
function ding_eresource_header_text($args) {
  // Currently, only the first argument is used.
  $args = array_slice($args, 0, 1);

  // This could probably do with its own table instead of abusing the
  // variables system.
  $text = variable_get('ding_eresource_header_text_' . implode('_', $args), NULL);

  if (empty($text)) {
    $text = variable_get('ding_eresource_header_text_default', NULL);
  }

  dpm($text);

  if (!empty($text)) {
    return check_markup($text['value'], $text['format']);
  }
}

include_once 'ding_eresource.features.inc';
